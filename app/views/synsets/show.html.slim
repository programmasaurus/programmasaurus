= link_to 'javascript:history.back()' do
  '< #{@previous_word.word_list}
.row-fluid
  .span12
    ul.inline
      - @synset.lemmas.each_slice(ApplicationHelper::COLOR_CLASSES.size) do |lemmas|
        - lemmas.each_with_index do |lemma, index|
          li
            h1 class=color_class(index)
              = link_to lemma_path(@synset.id, lemma: lemma), class: "pull-left #{color_class(index)}" do
               = lemma
              - if signed_in? && current_user.words.for_lemma(@synset.id, lemma).count > 0
                span.pull-right.counter
                  = current_user.words.for_lemma(@synset.id, lemma).count
    = render partial: "shared/gloss"
.row-fluid
  .span6

    - if @synset.hypernyms.present?
      h5 Less specific
      ul.inline
        - @synset.hypernyms.each do |hypernym|
          li.lead
            - hypernym.lemmas.each do |lemma|
              =' link_to lemma, synset_path(hypernym.id, previous_id: @synset.id)

    - if @synset.hyponyms.present?
      h5 More specific
      ul.inline
        - @synset.hyponyms.each do |hyponym|
          li.lead
            - hyponym.lemmas.each do |lemma|
              =' link_to lemma, synset_path(hyponym.id, previous_id: @synset.id)

    - if @synset.sister_words.present?
      h5 Related
      ul.inline
        - @synset.sister_words.each do |sister_word|
          li.lead
            - sister_word.lemmas.each do |lemma|
              =' link_to lemma, synset_path(sister_word.id, previous_id: @synset.id)

    - if @synset.evocations.present?
      h5 Evocations
      ul.inline
        - @synset.evocations.each do |evocation|
          li.lead
            - evocation.lemmas.each do |lemma|
              =' link_to lemma, synset_path(evocation.id, previous_id: @synset.id)

  .span4.offset1#vocab_sidebar
    .pull-right
      h5 Vocabularies with these words
      - @synset.lemmas.map { |lemma| current_user.vocabularies.for_lemma(@synset.id, lemma) }.flatten.each do |vocabulary|
        h4= vocabulary.title
        ul
          - vocabulary.words.pluck(:lemma).sort.each do |lemma|
            li= lemma
